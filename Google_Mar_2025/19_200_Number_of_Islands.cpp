#include <iostream>
#include <vector>
#include <queue>
//#include <pair>
#include <algorithm>
using namespace std;


/* Time O(row*col)
*  Space O(min(row,col)) //in worst case all element could be one ans take all space in queue at once
*
*/
void bfs(vector<vector<char>>& grid, int row, int col, int i, int j, int dir[][2]) {
        queue<pair<int, int>> q;
        q.push({i,j});
        grid[i][j]='0';
        while(!q.empty()){
            pair<int, int> temp = q.front();
            q.pop();
            for(int i=0;i<4;i++){
                int *ar=dir[i];
                int newi=temp.first+ar[0];
                int newj=temp.second+ar[1];
                if(newi>=0 && newi<row && newj>=0 && newj<col && grid[newi][newj]=='1'){
                    grid[newi][newj]='0';
                    q.push({newi,newj});
                }
            }
        }
    }

int numIslands(vector<vector<char>>& grid) {
        int dir[][2] = {{0,1},{0,-1},{1,0},{-1,0}};
        int row=grid.size();
        int col=grid[0].size();
        int count=0;
        for(int i=0;i<row;i++) {
            for(int j=0;j<col;j++){
                if(grid[i][j] == '1'){
                    bfs(grid, row, col, i, j, dir);
                    count++;
                }
            }
        }
        return count;
    }

int main() {
    vector<vector<char>> grid = {{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},{'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}};
    int res=numIslands(grid);
    cout<<res;
    return 0;
}
